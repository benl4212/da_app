#!/bin/bash

# This script automates the process of pushing updates to GitHub and Docker Hub.
# ./deploy.sh
# It will:
# 0. Update requirements.txt from grid-data-env
# 1. Prompt for a commit message.
# 2. Prompt for a new version tag (e.g., 1.2).
# 3. Push the code changes to your GitHub repository.
# 4. Build a new Docker image.
# 5. Tag the image with the new version and 'latest'.
# 6. Push the new image to Docker Hub.

# --- Configuration ---
# Set your Docker Hub username and the name of your image here.
DOCKER_USERNAME="benl4212"
IMAGE_NAME="grid-data-app"
LOCAL_IMAGE_NAME="da_app_streamlit_app:latest" # The name generated by `docker compose build`
VENV_PATH="/home/benl4/grid-data-env"

# Exit immediately if a command exits with a non-zero status.
set -e

# --- Update requirements.txt ---
echo "--- Updating requirements.txt---"

# Check if the virtual environment directory exists
if [ ! -d "$VENV_PATH" ]; then
    echo "Error: Virtual environment directory not found at '$VENV_PATH'."
    echo "Please make sure you are in the correct project directory."
    exit 1
fi

# Generate requirements.txt from the virtual environment
echo "Generating requirements.txt from '$VENV_PATH'..."
"$VENV_PATH/bin/pip" freeze > requirements.txt
echo "âœ… requirements.txt has been updated."
echo

# --- GitHub Workflow ---
echo "--- Starting GitHub Update ---"

# Prompt for a commit message
read -p "Enter your commit message: " COMMIT_MESSAGE

# Stage all changes
echo "Staging all changes with 'git add .'"
git add .

# Commit the changes
echo "Committing changes..."
git commit -m "$COMMIT_MESSAGE"

# Push to GitHub
echo "Pushing to GitHub..."
git push

echo "âœ… GitHub update complete."
echo

# --- Docker Hub Workflow ---
echo "--- Starting Docker Hub Update ---"

# Prompt for a version tag
read -p "Enter the new version tag (e.g., 1.2): " VERSION_TAG

# Build the new Docker image using Docker Compose
echo "Building new Docker image..."
docker compose build

# Tag the image for Docker Hub
echo "Tagging image with version '$VERSION_TAG' and 'latest'..."
docker tag "$LOCAL_IMAGE_NAME" "$DOCKER_USERNAME/$IMAGE_NAME:$VERSION_TAG"
docker tag "$LOCAL_IMAGE_NAME" "$DOCKER_USERNAME/$IMAGE_NAME:latest"

# Push the tags to Docker Hub
echo "Pushing version '$VERSION_TAG' to Docker Hub..."
docker push "$DOCKER_USERNAME/$IMAGE_NAME:$VERSION_TAG"

echo "Pushing 'latest' tag to Docker Hub..."
docker push "$DOCKER_USERNAME/$IMAGE_NAME:latest"

echo "âœ… Docker Hub update complete."
echo
echo "ðŸš€ Deployment finished successfully!"

